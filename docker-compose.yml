# docker-compose.yml
version: '3.8'

services:
  nginx-proxy:
    image: docker.io/nginxproxy/nginx-proxy:1.7 # Use a specific tag in production if preferred
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Persist certificates
      - certs:/etc/nginx/certs:rw # Read/Write needed by companion initially
      # Share configurations and html for challenges
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      # Allow nginx-proxy to detect other containers
      - /var/run/docker.sock:/tmp/docker.sock:ro # Read Only is safer
      - ./show_version.conf:/etc/nginx/conf.d/show_version.conf:ro # Mount custom config
      - ./skill_blaataap_com.conf:/etc/nginx/vhost.d/skill.blaataap.com:ro # Mount custom block OPTIONS
    networks:
      - webproxy # Use a dedicated network
    restart: always

  letsencrypt-companion:
    image: docker.io/nginxproxy/acme-companion:2.5 # Use a specific tag in production if preferred
    container_name: letsencrypt-companion
    volumes:
      # Share the docker socket to detect containers
      - /var/run/docker.sock:/var/run/docker.sock:ro # Read Only is safer
      # Use volumes shared with nginx-proxy
      - certs:/etc/nginx/certs:rw # Needs RW access
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    environment:
      # Set default email for Let's Encrypt registration
      - DEFAULT_EMAIL=skill@blaataap.com
      # Tell the companion which nginx-proxy container to use (by container name)
      - NGINX_PROXY_CONTAINER=nginx-proxy
    networks:
      - webproxy # Must be on the same network
    depends_on:
      - nginx-proxy
    restart: always

  # Your Application Service
  skill: # Name of the service
    image: ${REPOSITORY}:${TAG}
    container_name: skill # Optional, but can be helpful
    # --- CRITICAL NGINX-PROXY/LETSENCRYPT VARIABLES ---
    environment:
      - VIRTUAL_HOST=skill.blaataap.com
      - LETSENCRYPT_HOST=skill.blaataap.com
      # Optional but recommended: Specify email per-service if needed
      - LETSENCRYPT_EMAIL=skill@blaataap.com
    # --- END CRITICAL VARIABLES ---
    # Expose the port your application listens on *inside* the container
    # DO NOT use 'ports:' here, nginx-proxy handles external exposure.
    expose:
      - "80" # The port your app listens on
    networks:
      - webproxy # Must be on the same network as the proxy
    # Add any other volumes, env vars, etc. your app needs
    # volumes:
    #   - ./app-data:/data
    restart: unless-stopped # Or 'always' if preferred

##
  # Define the service for your Flask API
  api:
    # image: ${REPOSITORY}-healthcheck-api:${TAG}
    image: ${REPOSITORY_HEALTHCHECK_API}:${TAG}

    # Set a specific container name, similar to --name in podman run
    container_name: healthcheck-api

    # --- CRITICAL NGINX-PROXY/LETSENCRYPT VARIABLES ---
    environment:
      - VIRTUAL_HOST=skill.blaataap.com
      - VIRTUAL_PATH=/api
    # --- END CRITICAL VARIABLES ---

    # Load environment variables from the specified file into the container
    # This makes PORT, FLASK_DEBUG etc. available inside
    env_file:
      - .env

    # Define port mapping: HOST:CONTAINER
    # Compose automatically reads the .env file in the same directory
    # and substitutes ${PORT} before starting the container.
    ports:
      - "${PORT}:${PORT}" # e.g., maps host 8080 to container 8080 if PORT=8080 in .env
    networks:
      - webproxy # Must be on the same network as the proxy
    # Define volume mounting: HOST_PATH:CONTAINER_PATH
    # Mounts the current directory on the host (.) into /app in the container
    # This allows the auto-reloader (with FLASK_DEBUG=1) to see code changes
    volumes:
      - ./health_check:/app

# Networks and volumes are usually created automatically by Compose if not explicitly defined
##
# Define the shared network
networks:
  webproxy:
    name: webproxy_network # Optional: give the network a specific name

# Define the persistent volumes
volumes:
  certs:
  vhostd:
  html:

# Old service
# services:
#   web:
#     image: ${REPOSITORY}:${TAG}
#     ports:
#       - "80:80"
